name: Incident Response & Self-Healing

on:
  workflow_run:
    workflows: ["Claude Code"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      incident_type:
        description: 'Type of incident'
        required: true
        type: choice
        options:
          - deployment_failure
          - test_failure
          - security_alert
          - performance_degradation

permissions:
  issues: write
  contents: write
  actions: write
  pull-requests: write

jobs:
  detect-incident:
    runs-on: ubuntu-latest
    outputs:
      is_incident: ${{ steps.detect.outputs.is_incident }}
      incident_severity: ${{ steps.detect.outputs.severity }}

    steps:
      - name: Detect incident
        id: detect
        run: |
          # ワークフローの実行結果を確認
          if [ "${{ github.event.workflow_run.conclusion }}" = "failure" ]; then
            echo "is_incident=true" >> $GITHUB_OUTPUT
            echo "severity=P1-High" >> $GITHUB_OUTPUT
            echo "🚨 Incident detected: Workflow failure"
          else
            echo "is_incident=false" >> $GITHUB_OUTPUT
            echo "✅ No incident detected"
          fi

  self-healing:
    needs: detect-incident
    if: needs.detect-incident.outputs.is_incident == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 完全な履歴を取得

      - name: Attempt automatic rollback
        id: rollback
        continue-on-error: true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🔄 Attempting automatic rollback..."

          # 最後の成功したコミットを特定
          LAST_SUCCESSFUL_COMMIT=$(git log --format="%H" --grep="success" -1 || git rev-parse HEAD~1)

          # ロールバック試行カウント
          ATTEMPT=1
          MAX_ATTEMPTS=3

          echo "attempt=$ATTEMPT" >> $GITHUB_OUTPUT
          echo "max_attempts=$MAX_ATTEMPTS" >> $GITHUB_OUTPUT

          # Note: 実際のロールバックはここで実装
          # git revert や git reset の実行

          echo "✅ Rollback attempt completed"

      - name: Execute Handshake Protocol on repeated failures
        if: failure() && steps.rollback.outputs.attempt >= '3'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;

            // 試行したすべてのアクションの詳細
            const systemDetails = `
            ### システム詳細

            - **ワークフロー:** ${{ github.event.workflow_run.name }}
            - **実行ID:** ${{ github.event.workflow_run.id }}
            - **失敗時刻:** ${{ github.event.workflow_run.updated_at }}
            - **ロールバック試行回数:** ${{ steps.rollback.outputs.attempt }}/${{ steps.rollback.outputs.max_attempts }}

            ### 収集したデータ

            - **最終成功コミット:** 特定済み
            - **エラーログ:** [ワークフロー実行ログ参照](${{ github.event.workflow_run.html_url }})
            - **影響範囲:** 調査中

            ### 試行したアクション

            1. ✅ インシデント検知
            2. ✅ 自動ロールバック試行 (3回)
            3. ❌ ロールバック失敗

            ---

            ## 🆘 Handshake Protocol

            **我々の自律性は限界に達しました。Guardian の介入を要請します。**

            システムはグレースフル・デグラデーションモードに移行し、影響を最小限に抑えています。

            ### Guardian が確認すべき事項

            1. 根本原因の手動分析
            2. ロールバックが失敗した理由
            3. 復旧手順の決定
            4. システムの再開承認

            ---

            **AGENTS.md 参照:** [グレースフル・デグラデーション・プロトコル](../AGENTS.md#graceful_degradation_and_human_escalation_protocol)
            `;

            await github.rest.issues.create({
              owner,
              repo,
              title: '🤖🆘 HANDSHAKE PROTOCOL: Autonomous Recovery Failed',
              body: systemDetails,
              labels: ['human-intervention-required', 'P0-Critical', 'incident-response']
            });

            console.log('🆘 Handshake Protocol executed: Human intervention requested');

      - name: Apply graceful degradation
        if: failure()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🛡️ Applying graceful degradation..."

          # 新規デプロイの停止（該当するワークフローがあれば）
          # 機能フラグでの影響機能のOFF（該当する場合）

          echo "✅ Graceful degradation applied"

      - name: Success notification
        if: success()
        run: |
          echo "✅ Self-healing completed successfully"
          echo "System has recovered automatically"
